{
  "swagger" : "2.0",
  "info" : {
    "title" : "Wonolo (params in:formData)",
    "description" : "\n<h1 id=\"label-Welcome\">Welcome to the Wonolo API<span><a href=\"#label-Welcome\"></a> <a href=\"#top\">&uarr;</a></span></h1>\n\n<p>The Wonolo API (V2.0) is a <a\nhref=\"https://en.wikipedia.org/wiki/Representational_state_transfer\">RESTful</a>\nAPI to perform <a\nhref=\"https://en.wikipedia.org/wiki/Create,_read,_update_and_delete\">CRUD</a>\noperations on Wonolo platform resources.</p>\n\n<p>Currently, JSON is the only encoding format supported.</p>\n\n<h2 id=\"label-API+Keys\">API Keys<span><a href=\"#label-API+Keys\"></a> <a href=\"#top\">&uarr;</a></span></h2>\n\n<p>Use of the Wonolo API requires keys. To obtain API keys, please <a\nhref=\"http://bit.ly/1Wk0ekp\">apply here</a>.</p>\n\n<h2 id=\"label-Test+and+Production+Environments\">Test and Production Environments<span><a href=\"#label-Test+and+Production+Environments\"></a> <a href=\"#top\">&uarr;</a></span></h2>\n\n<p>You will be issued with two sets of API keys:</p>\n<ul><li>\n<p><strong>test</strong> (starting with <code>pk_test</code> and\n<code>sk_test</code>) - for use with <a\nhref=\"https://test.wonolo.com/api_v2\">test.wonolo.com/api_v2</a></p>\n</li><li>\n<p><strong>production</strong> (starting with <code>pk_live</code> and\n<code>sk_live</code>) - for use with <a\nhref=\"https://api.wonolo.com/api_v2\">api.wonolo.com/api_v2</a></p>\n</li></ul>\n\n<h2 id=\"label-Security+-2F+HTTPS\">Security / HTTPS<span><a href=\"#label-Security+-2F+HTTPS\"></a> <a href=\"#top\">&uarr;</a></span></h2>\n\n<p>All API calls must be made over HTTPS.</p>\n\n<p>With the exception of <code>/authenticate</code> and <code>/info</code>,\nall API calls must use an authorization token (passed as the\n<code>token</code> parameter).</p>\n\n<h2 id=\"label-Webhooks\">Webhooks<span><a href=\"#label-Webhooks\">&para;</a> <a href=\"#top\">&uarr;</a></span></h2>\n\n<p>Webhooks allow your system to be notified of changes to certain Wonolo\nresources via an HTTP call initiated from the Wonolo platform.</p>\n\n<p>Currently, webhooks are available for state changes to\n<code>JobRequest</code> and <code>Job</code> resources.</p>\n\n<h3 id=\"label-Webhook+Security\">Webhook Security<span><a href=\"#label-Webhook+Security\">&para;</a> <a href=\"#top\">&uarr;</a></span></h3>\n\n<p>Webhooks are authenticated using a <code>X-Wonolo-Webhook-Token</code> HTTP\nheader.  This header is set to a SHA256 digest of the webhook&#39;s JSON\nbody concatenated with your secret API key.</p>\n\n<h3 id=\"label-Configuring+Webhooks\">Configuring Webhooks<span><a href=\"#label-Configuring+Webhooks\">&para;</a> <a href=\"#top\">&uarr;</a></span></h3>\n\n<p>To enable webhooks, please first obtain your API keys and then <a\nhref=\"mailto:support@wonolo.com?subject=Webhooks\">contact us</a>.</p>\n\n<h2 id=\"label-Access+Control+-2F+Priviledge+Levels\">Access Control / Priviledge Levels<span><a href=\"#label-Access+Control+-2F+Priviledge+Levels\">&para;</a> <a href=\"#top\">&uarr;</a></span></h2>\n\n<p>Wonolo API keys will provide one of two different levels of access to\nWonolo resources:</p>\n<ul><li>\n<p><strong>Public Pool</strong> access - if you are accessing Wonolo&#39;s\npublic pool of Wonoloers</p>\n</li><li>\n<p><strong>Private Pool</strong> access - if your company is managing its own\nprivate pool of workers</p>\n</li></ul>\n\n<p>With <strong>Public Pool</strong> access, you will only be able to access\nthose Wonoloers you have active Jobs with, and Job Requests and Jobs that\nyou have created. Also, write operations (update/PATCH and create/POST) are\nforbidden in many cases.</p>\n\n<p>For more details, consult the documentation of the individual endpoints.</p>\n\n<h1 id=\"label-Getting+Started\">Getting Started<span><a href=\"#label-Getting+Started\">&para;</a> <a href=\"#top\">&uarr;</a></span></h1>\n\n<p>Once you receive your API keys, the first step is to authenticate to obtain\na token for use with subsequent API calls. Please refer to the\n<code>/api_v2/authenticate</code> endpoint documentation below.</p>\n2015-2017 Wonolo Inc. All rights reserved.",
    "version" : "2.0",
    "x-copyright" : "2015-2017 Wonolo Inc. All rights reserved."
  },
  "basePath" : "/api_v2",
  "consumes" : [
    "application/x-www-form-urlencoded",
    "multipart/form-data"
  ],
  "paths" : {
    "/messages" : {
      "get" : {
        "tags" : [
          "messages"
        ],
        "consumes" : [
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "operationId" : "get_messages",
        "summary" : "List Messages",
        "parameters" : [
          {
            "name" : "token",
            "type" : "string",
            "in" : "query",
            "required" : true,
            "description" : "Token obtained from /authorize"
          },
          {
            "name" : "page",
            "type" : "number",
            "in" : "query",
            "description" : "The page number to start from"
          },
          {
            "name" : "per",
            "type" : "number",
            "in" : "query",
            "description" : "The size of the page"
          },
          {
            "name" : "job_id",
            "type" : "number",
            "in" : "query",
            "description" : "Filter Messages by Job"
          },
          {
            "name" : "sender_id",
            "type" : "number",
            "in" : "query",
            "description" : "Filter Messages by Sender (User ID)"
          },
          {
            "name" : "receiver_id",
            "type" : "number",
            "in" : "query",
            "description" : "Filter Messages by Receiver (User ID)"
          }
        ],
        "responses" : {
          "401" : {
            "description" : "Unauthorized"
          }
        },
        "description" : "\n<p>Returns a list of Messages, optionally paginated. Note: the maximum number\nreturned per page in any case is 50.</p>\n"
      },
      "post" : {
        "tags" : [
          "messages"
        ],
        "consumes" : [
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "operationId" : "post_messages",
        "summary" : "Create a Message",
        "parameters" : [
          {
            "name" : "message[body]",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "The text content of this Message"
          },
          {
            "name" : "message[job_id]",
            "type" : "number",
            "in" : "formData",
            "required" : true,
            "description" : "ID of the Job to which this Message relates"
          },
          {
            "name" : "message[receiver_id]",
            "type" : "number",
            "in" : "formData",
            "required" : true,
            "description" : "User ID of recipient of this Message. Can be a Wonoloer or a Requestor"
          },
          {
            "name" : "message[sender_id]",
            "type" : "number",
            "in" : "formData",
            "required" : true,
            "description" : "User ID of sender of this Message. Can be a Wonoloer or a Requestor"
          },
          {
            "name" : "token",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "Token obtained from /authorize"
          },
          {
            "name" : "message[image_url]",
            "type" : "string",
            "in" : "formData",
            "description" : "The URL of an image to accompany this Message"
          },
          {
            "name" : "message[read_at]",
            "type" : "string",
            "in" : "formData",
            "description" : "If read, when this message was read"
          }
        ],
        "responses" : {
          "401" : {
            "description" : "Unauthorized"
          }
        },
        "description" : ""
      }
    },
    "/messages/{id}" : {
      "get" : {
        "tags" : [
          "messages"
        ],
        "consumes" : [
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "operationId" : "get_messages_id",
        "summary" : "Get a specific Message",
        "parameters" : [
          {
            "name" : "token",
            "type" : "string",
            "in" : "query",
            "required" : true,
            "description" : "Token obtained from /authorize"
          },
          {
            "name" : "id",
            "type" : "number",
            "in" : "path",
            "required" : true,
            "description" : "ID of Message"
          }
        ],
        "responses" : {
          "401" : {
            "description" : "Unauthorized"
          }
        },
        "description" : ""
      }
    },
    "/jobs" : {
      "get" : {
        "tags" : [
          "jobs"
        ],
        "consumes" : [
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "operationId" : "get_jobs",
        "summary" : "List Jobs",
        "parameters" : [
          {
            "name" : "token",
            "type" : "string",
            "in" : "query",
            "required" : true,
            "description" : "Token obtained from /authorize"
          },
          {
            "name" : "page",
            "type" : "number",
            "in" : "query",
            "description" : "The page number to start from"
          },
          {
            "name" : "per",
            "type" : "number",
            "in" : "query",
            "description" : "The size of the page"
          },
          {
            "name" : "state",
            "type" : "string",
            "in" : "query",
            "description" : "Filter Jobs by state"
          },
          {
            "name" : "job_request_id",
            "type" : "number",
            "in" : "query",
            "description" : "List jobs for the specified Job Request"
          },
          {
            "name" : "classification",
            "type" : "string",
            "in" : "query",
            "description" : "Return jobs by a specific tax classification"
          },
          {
            "name" : "w2_hourly_rate",
            "type" : "number",
            "in" : "query",
            "description" : "Return jobs by a specific hourly rate"
          },
          {
            "name" : "w2_pay_status",
            "type" : "string",
            "in" : "query",
            "description" : "Return jobs by a specific pay status (not_started pending paid)"
          },
          {
            "name" : "updated_before",
            "type" : "string",
            "in" : "query",
            "description" : "Return jobs by those that were last updated before provided DateTime"
          },
          {
            "name" : "updated_after",
            "type" : "string",
            "in" : "query",
            "description" : "Return jobs by those that were last updated after provided DateTime"
          }
        ],
        "responses" : {
          "401" : {
            "description" : "Unauthorized"
          }
        },
        "description" : "\n<p>Returns a list of Jobs, optionally paginated. Note: the maximum number\nreturned per page in any case is 50.</p>\n"
      },
      "post" : {
        "tags" : [
          "jobs"
        ],
        "consumes" : [
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "operationId" : "post_jobs",
        "summary" : "Create a Job",
        "parameters" : [
          {
            "name" : "job[job_request_id]",
            "type" : "number",
            "in" : "formData",
            "required" : true,
            "description" : "ID of the Job Request being fulfilled by this Job"
          },
          {
            "name" : "job[worker_id]",
            "type" : "number",
            "in" : "formData",
            "required" : true,
            "description" : "ID of the Worker to perform the Job"
          },
          {
            "name" : "token",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "Token obtained from /authorize"
          },
          {
            "name" : "job[requestor_notes]",
            "type" : "string",
            "in" : "formData",
            "description" : "Arbitary text to be attached to this Job - not visible to Worker"
          }
        ],
        "responses" : {
          "403" : {
            "description" : "Forbidden - if you have Public Pool access only"
          }
        },
        "description" : ""
      }
    },
    "/jobs/assign" : {
      "post" : {
        "tags" : [
          "jobs"
        ],
        "consumes" : [
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "operationId" : "post_jobs_assign",
        "summary" : "Assign a Job",
        "parameters" : [
          {
            "name" : "job[job_request_id]",
            "type" : "number",
            "in" : "formData",
            "required" : true,
            "description" : "ID of the Job Request being fulfilled by this Job"
          },
          {
            "name" : "job[worker_id]",
            "type" : "number",
            "in" : "formData",
            "required" : true,
            "description" : "ID of the Worker to perform the Job"
          },
          {
            "name" : "token",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "Token obtained from /authorize"
          },
          {
            "name" : "job[requestor_notes]",
            "type" : "string",
            "in" : "formData",
            "description" : "Arbitary text to be attached to this Job - not visible to Worker"
          }
        ],
        "responses" : {
          "403" : {
            "description" : "Forbidden - if you have Public Pool access only"
          }
        },
        "description" : ""
      }
    },
    "/jobs/{id}" : {
      "patch" : {
        "tags" : [
          "jobs"
        ],
        "consumes" : [
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "operationId" : "patch_jobs_id",
        "summary" : "Update a Job",
        "parameters" : [
          {
            "name" : "token",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "Token obtained from /authorize"
          },
          {
            "name" : "id",
            "type" : "number",
            "in" : "path",
            "required" : true
          },
          {
            "name" : "state",
            "type" : "string",
            "in" : "formData",
            "description" : "Use 'cancelled' if you want cancel a job."
          },
          {
            "name" : "actual_duration",
            "type" : "number",
            "in" : "formData",
            "description" : "The actual duration of a job, in minutes"
          },
          {
            "name" : "cancelled_reason",
            "type" : "string",
            "in" : "formData",
            "description" : "Give a reason such as 'admin_cancelled', 'decided_to_cancel', or 'asked_to_cancel' so that the worker will not receive notifications for this job again"
          }
        ],
        "responses" : {
          "403" : {
            "description" : "Forbidden - if you have Public Pool access only"
          }
        },
        "description" : ""
      },
      "get" : {
        "tags" : [
          "jobs"
        ],
        "consumes" : [
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "operationId" : "get_jobs_id",
        "summary" : "Get a specific Job",
        "parameters" : [
          {
            "name" : "token",
            "type" : "string",
            "in" : "query",
            "required" : true,
            "description" : "Token obtained from /authorize"
          },
          {
            "name" : "id",
            "type" : "number",
            "in" : "path",
            "required" : true
          }
        ],
        "responses" : {
          "200" : {
            "description" : "ok"
          }
        },
        "description" : ""
      }
    },
    "/job_requests" : {
      "get" : {
        "tags" : [
          "job_requests"
        ],
        "consumes" : [
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "operationId" : "get_job_requests",
        "summary" : "List JobRequests",
        "parameters" : [
          {
            "name" : "token",
            "type" : "string",
            "in" : "query",
            "required" : true,
            "description" : "Token obtained from /authorize"
          },
          {
            "name" : "page",
            "type" : "number",
            "in" : "query",
            "description" : "The page number to start from"
          },
          {
            "name" : "per",
            "type" : "number",
            "in" : "query",
            "description" : "The size of the page"
          },
          {
            "name" : "state",
            "type" : "string",
            "in" : "query",
            "description" : "Filter Job Requests by state"
          },
          {
            "name" : "company_id",
            "type" : "string",
            "in" : "query",
            "description" : "Filter Job Requests by Company ID"
          },
          {
            "name" : "multi_day_job_request_id",
            "type" : "number",
            "in" : "query",
            "description" : "Filter Job Requests by the Multi-Day Job Request they relate to"
          },
          {
            "name" : "classification",
            "type" : "string",
            "enum" : [
              "w2",
              "1099"
            ],
            "in" : "query",
            "description" : "Filter Job Requests by their tax classification"
          },
          {
            "name" : "w2_hourly_rate",
            "type" : "number",
            "in" : "query",
            "description" : "Filter Job Requests by their W2 hourly rate"
          },
          {
            "name" : "updated_before",
            "type" : "string",
            "in" : "query",
            "description" : "Filter Job Requests by those that were last updated before provided DateTime"
          },
          {
            "name" : "updated_after",
            "type" : "string",
            "in" : "query",
            "description" : "Filter Job Requests by those that were last updated after provided DateTime"
          },
          {
            "name" : "agent_code",
            "type" : "string",
            "in" : "query",
            "description" : "Filter Job Requests by Company defined employee number. Enter 'Null' to get Job Requests with only empty value for the attribute"
          }
        ],
        "responses" : {
          "401" : {
            "description" : "Unauthorized"
          }
        },
        "description" : "\n<p>Returns a list of Job Requests, optionally paginated. Note: the maximum\nnumber returned per page in any case is 50.</p>\n"
      },
      "post" : {
        "tags" : [
          "job_requests"
        ],
        "consumes" : [
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "operationId" : "post_job_requests",
        "summary" : "Create a JobRequest",
        "parameters" : [
          {
            "name" : "job_request[request_name]",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "A Requestor-visible name for this Job Request (not visible to Wonoloer)"
          },
          {
            "name" : "job_request[zip]",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "The zip of the work location"
          },
          {
            "name" : "job_request[city]",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "The city of the work location"
          },
          {
            "name" : "job_request[address]",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "The street address of the work location, e.g. '123 Fremont St'"
          },
          {
            "name" : "job_request[slots]",
            "type" : "number",
            "in" : "formData",
            "required" : true,
            "description" : "The number of Wonoloers required."
          },
          {
            "name" : "job_request[description_tasks]",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "A detailed description of the work to be performed. Required unless +description+ is specified."
          },
          {
            "name" : "job_request[description]",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "A detailed description of the work to be performed. Required unless +description_tasks+ is specified. If the below description_ fields are specified, +description+ will automatically be populated with a concatenation of those fields."
          },
          {
            "name" : "job_request[category]",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "The category of the work to be performed, e.g. 'Customer Service'. Must be one of the pre-defined values defined for the API user's Company."
          },
          {
            "name" : "job_request[state]",
            "type" : "string",
            "enum" : [
              "unfilled",
              "unassigned",
              "posted",
              "filled",
              "in_progress",
              "completed",
              "approved",
              "cancelled"
            ],
            "in" : "formData",
            "required" : true,
            "description" : "The Job Request's status. See the Job Request resource documentation for details."
          },
          {
            "name" : "token",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "Token obtained from /authorize"
          },
          {
            "name" : "job_request[description_company]",
            "type" : "string",
            "in" : "formData",
            "description" : "A description of the company making this Job Request."
          },
          {
            "name" : "job_request[description_travel]",
            "type" : "string",
            "in" : "formData",
            "description" : "Travel tips for the Wonoloer in performing this Job Request."
          },
          {
            "name" : "job_request[description_skills]",
            "type" : "string",
            "in" : "formData",
            "description" : "Skills required to satisfy this Job Request. Multiple skills should be separated with the pipe character +|+"
          },
          {
            "name" : "job_request[description_contact]",
            "type" : "string",
            "in" : "formData",
            "description" : "Who the Wonoloer should contact for any questions related to this Job Request."
          },
          {
            "name" : "job_request[description_arrival]",
            "type" : "string",
            "in" : "formData",
            "description" : "Any arrival instructions for the Wonoloer."
          },
          {
            "name" : "job_request[start_time]",
            "type" : "string",
            "in" : "formData",
            "description" : "The time to start work in 24-hour format. Example: 2018-08-18 19:30"
          },
          {
            "name" : "job_request[duration]",
            "type" : "number",
            "in" : "formData",
            "description" : "The expected length of the Job in MINUTES."
          },
          {
            "name" : "job_request[venue]",
            "type" : "string",
            "in" : "formData",
            "description" : "The name of the work location, e.g. 'Best Buy Store 321'"
          },
          {
            "name" : "job_request[employer_id]",
            "type" : "number",
            "in" : "formData",
            "description" : "The ID of the Requestor (Employer) requesting the work"
          },
          {
            "name" : "job_request[wage]",
            "type" : "number",
            "in" : "formData",
            "description" : "The wage to be paid."
          },
          {
            "name" : "job_request[preferred_candidate_ids]",
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "in" : "formData",
            "description" : "An array of Wonoloer IDs that are Preferred for this Job Request. Preferred Wonoloers are notified first and have a chance to accept before other ranked Wonoloers are notified."
          },
          {
            "name" : "job_request[open_request]",
            "type" : "boolean",
            "in" : "formData",
            "description" : "True if this Job Request should open up to any eligible Wonoloer once all Preferred Wonoloers have been notified and a configurable time has passed"
          },
          {
            "name" : "job_request[multi_day]",
            "type" : "boolean",
            "in" : "formData",
            "description" : "True if this Job Request is part of a multi-day Job Request"
          },
          {
            "name" : "job_request[multi_day_job_request_id]",
            "type" : "number",
            "in" : "formData",
            "description" : "The id of the multi-day Job Request if multi-day"
          },
          {
            "name" : "job_request[badge_requirements_attributes]",
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "in" : "formData",
            "description" : "Any Badges that are required to accept this Job Request"
          },
          {
            "name" : "job_request[notification_distance]",
            "type" : "number",
            "in" : "formData",
            "description" : "The maximum distance in MILES for notifications for this Job Request. Wonoloers whose current location is more than this distance from the Job Request location will not be notified. Overrides any default setting at the Company level."
          },
          {
            "name" : "job_request[ban_list]",
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "in" : "formData",
            "description" : "An array of Wonoloer IDs that are explicitly blocked from being notified or accepting this Job Request."
          },
          {
            "name" : "job_request[classification]",
            "type" : "string",
            "enum" : [
              "w2",
              "1099"
            ],
            "in" : "formData",
            "description" : "The Job Request's tax classification. Default is 1099."
          },
          {
            "name" : "job_request[w2_hourly_rate]",
            "type" : "number",
            "in" : "formData",
            "description" : "The hourly rate for W2 job requests \u2014 required with W2 classification"
          },
          {
            "name" : "job_request[push_all_notifications_asap]",
            "type" : "string",
            "in" : "formData",
            "description" : "Send all push notifications asap - use 'on' to set, 'off' to unset"
          },
          {
            "name" : "job_request[can]",
            "type" : "string",
            "in" : "formData",
            "description" : "Company defined job request number"
          },
          {
            "name" : "job_request[agent_code]",
            "type" : "string",
            "in" : "formData",
            "description" : "Company defined employee number - must be between 1 and 25 characters in length"
          },
          {
            "name" : "job_request[organizational_path]",
            "type" : "string",
            "in" : "formData",
            "description" : "Company defined notification tiers"
          },
          {
            "name" : "job_request[use_pending_state]",
            "type" : "boolean",
            "in" : "formData",
            "description" : "Enable Pending Workflow for this Job Request"
          }
        ],
        "responses" : {
          "403" : {
            "description" : "Forbidden - if you have Public Pool access only"
          }
        },
        "description" : ""
      }
    },
    "/job_requests/{id}" : {
      "patch" : {
        "tags" : [
          "job_requests"
        ],
        "consumes" : [
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "operationId" : "patch_job_requests_id",
        "summary" : "Update a JobRequest",
        "parameters" : [
          {
            "name" : "job_request[request_name]",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "A Requestor-visible name for this Job Request (not visible to Wonoloer)"
          },
          {
            "name" : "job_request[zip]",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "The zip of the work location"
          },
          {
            "name" : "job_request[city]",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "The city of the work location"
          },
          {
            "name" : "job_request[address]",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "The street address of the work location, e.g. '123 Fremont St'"
          },
          {
            "name" : "job_request[slots]",
            "type" : "number",
            "in" : "formData",
            "required" : true,
            "description" : "The number of Wonoloers required."
          },
          {
            "name" : "job_request[description_tasks]",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "A detailed description of the work to be performed. Required unless +description+ is specified."
          },
          {
            "name" : "job_request[description]",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "A detailed description of the work to be performed. Required unless +description_tasks+ is specified. If the below description_ fields are specified, +description+ will automatically be populated with a concatenation of those fields."
          },
          {
            "name" : "job_request[category]",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "The category of the work to be performed, e.g. 'Customer Service'. Must be one of the pre-defined values defined for the API user's Company."
          },
          {
            "name" : "job_request[state]",
            "type" : "string",
            "enum" : [
              "unfilled",
              "unassigned",
              "posted",
              "filled",
              "in_progress",
              "completed",
              "approved",
              "cancelled"
            ],
            "in" : "formData",
            "required" : true,
            "description" : "The Job Request's status. See the Job Request resource documentation for details."
          },
          {
            "name" : "token",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "Token obtained from /authorize"
          },
          {
            "name" : "id",
            "type" : "number",
            "in" : "path",
            "required" : true,
            "description" : "ID of the Job Request"
          },
          {
            "name" : "state",
            "type" : "string",
            "in" : "formData",
            "description" : "Use 'cancelled' if you want cancel a job request."
          },
          {
            "name" : "job_request[description_company]",
            "type" : "string",
            "in" : "formData",
            "description" : "A description of the company making this Job Request."
          },
          {
            "name" : "job_request[description_travel]",
            "type" : "string",
            "in" : "formData",
            "description" : "Travel tips for the Wonoloer in performing this Job Request."
          },
          {
            "name" : "job_request[description_skills]",
            "type" : "string",
            "in" : "formData",
            "description" : "Skills required to satisfy this Job Request. Multiple skills should be separated with the pipe character +|+"
          },
          {
            "name" : "job_request[description_contact]",
            "type" : "string",
            "in" : "formData",
            "description" : "Who the Wonoloer should contact for any questions related to this Job Request."
          },
          {
            "name" : "job_request[description_arrival]",
            "type" : "string",
            "in" : "formData",
            "description" : "Any arrival instructions for the Wonoloer."
          },
          {
            "name" : "job_request[start_time]",
            "type" : "string",
            "in" : "formData",
            "description" : "The time to start work in 24-hour format. Example: 2018-08-18 19:30"
          },
          {
            "name" : "job_request[duration]",
            "type" : "number",
            "in" : "formData",
            "description" : "The expected length of the Job in MINUTES."
          },
          {
            "name" : "job_request[venue]",
            "type" : "string",
            "in" : "formData",
            "description" : "The name of the work location, e.g. 'Best Buy Store 321'"
          },
          {
            "name" : "job_request[employer_id]",
            "type" : "number",
            "in" : "formData",
            "description" : "The ID of the Requestor (Employer) requesting the work"
          },
          {
            "name" : "job_request[wage]",
            "type" : "number",
            "in" : "formData",
            "description" : "The wage to be paid."
          },
          {
            "name" : "job_request[preferred_candidate_ids]",
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "in" : "formData",
            "description" : "An array of Wonoloer IDs that are Preferred for this Job Request. Preferred Wonoloers are notified first and have a chance to accept before other ranked Wonoloers are notified."
          },
          {
            "name" : "job_request[open_request]",
            "type" : "boolean",
            "in" : "formData",
            "description" : "True if this Job Request should open up to any eligible Wonoloer once all Preferred Wonoloers have been notified and a configurable time has passed"
          },
          {
            "name" : "job_request[multi_day]",
            "type" : "boolean",
            "in" : "formData",
            "description" : "True if this Job Request is part of a multi-day Job Request"
          },
          {
            "name" : "job_request[multi_day_job_request_id]",
            "type" : "number",
            "in" : "formData",
            "description" : "The id of the multi-day Job Request if multi-day"
          },
          {
            "name" : "job_request[badge_requirements_attributes]",
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "in" : "formData",
            "description" : "Any Badges that are required to accept this Job Request"
          },
          {
            "name" : "job_request[notification_distance]",
            "type" : "number",
            "in" : "formData",
            "description" : "The maximum distance in MILES for notifications for this Job Request. Wonoloers whose current location is more than this distance from the Job Request location will not be notified. Overrides any default setting at the Company level."
          },
          {
            "name" : "job_request[ban_list]",
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "in" : "formData",
            "description" : "An array of Wonoloer IDs that are explicitly blocked from being notified or accepting this Job Request."
          },
          {
            "name" : "job_request[classification]",
            "type" : "string",
            "enum" : [
              "w2",
              "1099"
            ],
            "in" : "formData",
            "description" : "The Job Request's tax classification. Default is 1099."
          },
          {
            "name" : "job_request[w2_hourly_rate]",
            "type" : "number",
            "in" : "formData",
            "description" : "The hourly rate for W2 job requests \u2014 required with W2 classification"
          },
          {
            "name" : "job_request[push_all_notifications_asap]",
            "type" : "string",
            "in" : "formData",
            "description" : "Send all push notifications asap - use 'on' to set, 'off' to unset"
          },
          {
            "name" : "job_request[can]",
            "type" : "string",
            "in" : "formData",
            "description" : "Company defined job request number"
          },
          {
            "name" : "job_request[agent_code]",
            "type" : "string",
            "in" : "formData",
            "description" : "Company defined employee number - must be between 1 and 25 characters in length"
          },
          {
            "name" : "job_request[organizational_path]",
            "type" : "string",
            "in" : "formData",
            "description" : "Company defined notification tiers"
          },
          {
            "name" : "job_request[use_pending_state]",
            "type" : "boolean",
            "in" : "formData",
            "description" : "Enable Pending Workflow for this Job Request"
          }
        ],
        "responses" : {
          "403" : {
            "description" : "Forbidden - if you have Public Pool access only"
          }
        },
        "description" : ""
      },
      "get" : {
        "tags" : [
          "job_requests"
        ],
        "consumes" : [
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "operationId" : "get_job_requests_id",
        "summary" : "Get a specific JobRequest",
        "parameters" : [
          {
            "name" : "token",
            "type" : "string",
            "in" : "query",
            "required" : true,
            "description" : "Token obtained from /authorize"
          },
          {
            "name" : "id",
            "type" : "number",
            "in" : "path",
            "required" : true,
            "description" : "ID of Job Request"
          }
        ],
        "responses" : {
          "200" : {
            "description" : "ok"
          }
        },
        "description" : ""
      }
    },
    "/job_requests/{id}/rankings" : {
      "get" : {
        "tags" : [
          "job_requests"
        ],
        "consumes" : [
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "operationId" : "get_job_requests_id_rankings",
        "summary" : "List the Wonoloers that are ranked for this JobRequest",
        "parameters" : [
          {
            "name" : "token",
            "type" : "string",
            "in" : "query",
            "required" : true,
            "description" : "Token obtained from /authorize"
          },
          {
            "name" : "id",
            "type" : "number",
            "in" : "path",
            "required" : true,
            "description" : "ID of Job Request"
          }
        ],
        "responses" : {
          "403" : {
            "description" : "Forbidden - if you have Public Pool access only"
          }
        },
        "description" : "\n<p>Returns details of the Wonoloers that were ranked for this JobRequest, in\nranked order.</p>\n"
      }
    },
    "/job_requests/{id}/resend_notifications" : {
      "post" : {
        "tags" : [
          "job_requests"
        ],
        "consumes" : [
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "operationId" : "post_job_requests_id_resend_notifications",
        "summary" : "Resend notifications for this JobRequest",
        "parameters" : [
          {
            "name" : "token",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "Token obtained from /authorize"
          },
          {
            "name" : "id",
            "type" : "number",
            "in" : "path",
            "required" : true,
            "description" : "ID of Job Request"
          },
          {
            "name" : "push_all_notifications_asap",
            "type" : "string",
            "in" : "formData",
            "description" : "Send all push notifications asap - use 'on' to set, 'off' to unset"
          }
        ],
        "responses" : {
          "403" : {
            "description" : "Forbidden - if you have Public Pool access only"
          }
        },
        "description" : "\n<p>If the JobRequest has Preferred Wonoloers, Preferred Notifications will\nfirst be resent to those Preferred Wonoloers who have not already accepted\nthe JobRequest.</p>\n\n<p>If the JobRequest does not have Preferred Wonoloers, the available Wonoloer\npool will be re-ranked and Wonoloers notified in resulting ranked order.</p>\n\n<p>NB: in both cases, the Wonoloers notified will not necessarily be - and are\nunlikely to be - exactly the same list as the prior time notifications were\nsent.</p>\n<hr>\n"
      }
    },
    "/job_requests/{id}/re_rank_workers" : {
      "post" : {
        "tags" : [
          "job_requests"
        ],
        "consumes" : [
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "operationId" : "post_job_requests_id_re_rank_workers",
        "summary" : "Re-rank workers for this JobRequest",
        "parameters" : [
          {
            "name" : "token",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "Token obtained from /authorize"
          },
          {
            "name" : "id",
            "type" : "number",
            "in" : "path",
            "required" : true,
            "description" : "ID of Job Request"
          }
        ],
        "responses" : {
          "403" : {
            "description" : "Forbidden - if you have Public Pool access only"
          }
        },
        "description" : ""
      }
    },
    "/customers/{id}" : {
      "get" : {
        "tags" : [
          "customers"
        ],
        "consumes" : [
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "operationId" : "get_customers_id",
        "summary" : "Get a specific Customer",
        "parameters" : [
          {
            "name" : "token",
            "type" : "string",
            "in" : "query",
            "required" : true,
            "description" : "Token obtained from /authenticate"
          },
          {
            "name" : "id",
            "type" : "number",
            "in" : "path",
            "required" : true,
            "description" : "ID of Customer"
          }
        ],
        "responses" : {
          "404" : {
            "description" : "Not found. No Customer with the specified ID can be found"
          }
        },
        "description" : ""
      },
      "patch" : {
        "tags" : [
          "customers"
        ],
        "consumes" : [
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "operationId" : "put/patch_customers_id",
        "summary" : "Update a Customer",
        "parameters" : [
          {
            "name" : "customer[name]",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "Customer Name"
          },
          {
            "name" : "token",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "Token obtained from /authenticate"
          },
          {
            "name" : "id",
            "type" : "number",
            "in" : "path",
            "required" : true,
            "description" : "ID of Customer"
          },
          {
            "name" : "customer[account_owner]",
            "type" : "string",
            "in" : "formData",
            "description" : "Account Owner"
          },
          {
            "name" : "customer[account_manager]",
            "type" : "string",
            "in" : "formData",
            "description" : "Account Manager"
          },
          {
            "name" : "customer[address]",
            "type" : "string",
            "in" : "formData",
            "description" : "Address"
          },
          {
            "name" : "customer[city]",
            "type" : "string",
            "in" : "formData",
            "description" : "City"
          },
          {
            "name" : "customer[state]",
            "type" : "string",
            "in" : "formData",
            "description" : "State"
          },
          {
            "name" : "customer[zip]",
            "type" : "string",
            "in" : "formData",
            "description" : "Zip"
          },
          {
            "name" : "customer[phone]",
            "type" : "string",
            "in" : "formData",
            "description" : "Phone"
          },
          {
            "name" : "customer[contact_first_name]",
            "type" : "string",
            "in" : "formData",
            "description" : "Contact First Name"
          },
          {
            "name" : "customer[contact_last_name]",
            "type" : "string",
            "in" : "formData",
            "description" : "Contact Last Name"
          },
          {
            "name" : "customer[contact_email]",
            "type" : "string",
            "in" : "formData",
            "description" : "Contact Email"
          },
          {
            "name" : "customer[billing_first_name]",
            "type" : "string",
            "in" : "formData",
            "description" : "Billing First Name - must be between 1 and 50 characters in length"
          },
          {
            "name" : "customer[billing_last_name]",
            "type" : "string",
            "in" : "formData",
            "description" : "Billing Last Name - must be between 1 and 50 characters in length"
          },
          {
            "name" : "customer[billing_email]",
            "type" : "string",
            "in" : "formData",
            "description" : "Billing Email - must be between 1 and 255 characters in length"
          },
          {
            "name" : "customer[billing_phone]",
            "type" : "string",
            "in" : "formData",
            "description" : "Billing Phone - must be between 1 and 50 characters in length"
          },
          {
            "name" : "customer[fee_percentage]",
            "type" : "number",
            "in" : "formData",
            "description" : "Fee Percentage - must be between 0.0 and 1.0"
          },
          {
            "name" : "customer[can_post_w2]",
            "type" : "boolean",
            "in" : "formData",
            "description" : "True if this Customer can post w2 job requests. Default is False when not set"
          },
          {
            "name" : "customer[can_post_1099]",
            "type" : "boolean",
            "in" : "formData",
            "description" : "True if this Customer can post 1099 job request. Default is True when not set"
          },
          {
            "name" : "customer[can_use_premier_features]",
            "type" : "boolean",
            "in" : "formData",
            "description" : "True if this Customer can use premium features"
          },
          {
            "name" : "customer[use_start_and_complete_pin]",
            "type" : "boolean",
            "in" : "formData",
            "description" : "True if this Customer can use Start and Complete Pin. Default is False when left blank or not set"
          },
          {
            "name" : "customer[strategic_pilot]",
            "type" : "boolean",
            "in" : "formData",
            "description" : "True if this Customer is strategic pilot"
          },
          {
            "name" : "customer[use_pending_state]",
            "type" : "boolean",
            "in" : "formData",
            "description" : "True if this Customer can use Pending Workflow. Default is False when not set"
          }
        ],
        "responses" : {
          "404" : {
            "description" : "Not found. No Customer with the specified ID can be found"
          },
          "422" : {
            "description" : "Could not save the Customer"
          }
        },
        "description" : ""
      }
    },
    "/customers" : {
      "post" : {
        "tags" : [
          "customers"
        ],
        "consumes" : [
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "operationId" : "post_customers",
        "summary" : "Create a Customer",
        "parameters" : [
          {
            "name" : "customer[name]",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "Customer Name"
          },
          {
            "name" : "token",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "Token obtained from /authenticate"
          },
          {
            "name" : "customer[account_owner]",
            "type" : "string",
            "in" : "formData",
            "description" : "Account Owner"
          },
          {
            "name" : "customer[account_manager]",
            "type" : "string",
            "in" : "formData",
            "description" : "Account Manager"
          },
          {
            "name" : "customer[address]",
            "type" : "string",
            "in" : "formData",
            "description" : "Address"
          },
          {
            "name" : "customer[city]",
            "type" : "string",
            "in" : "formData",
            "description" : "City"
          },
          {
            "name" : "customer[state]",
            "type" : "string",
            "in" : "formData",
            "description" : "State"
          },
          {
            "name" : "customer[zip]",
            "type" : "string",
            "in" : "formData",
            "description" : "Zip"
          },
          {
            "name" : "customer[phone]",
            "type" : "string",
            "in" : "formData",
            "description" : "Phone"
          },
          {
            "name" : "customer[contact_first_name]",
            "type" : "string",
            "in" : "formData",
            "description" : "Contact First Name"
          },
          {
            "name" : "customer[contact_last_name]",
            "type" : "string",
            "in" : "formData",
            "description" : "Contact Last Name"
          },
          {
            "name" : "customer[contact_email]",
            "type" : "string",
            "in" : "formData",
            "description" : "Contact Email"
          },
          {
            "name" : "customer[billing_first_name]",
            "type" : "string",
            "in" : "formData",
            "description" : "Billing First Name - must be between 1 and 50 characters in length"
          },
          {
            "name" : "customer[billing_last_name]",
            "type" : "string",
            "in" : "formData",
            "description" : "Billing Last Name - must be between 1 and 50 characters in length"
          },
          {
            "name" : "customer[billing_email]",
            "type" : "string",
            "in" : "formData",
            "description" : "Billing Email - must be between 1 and 255 characters in length"
          },
          {
            "name" : "customer[billing_phone]",
            "type" : "string",
            "in" : "formData",
            "description" : "Billing Phone - must be between 1 and 50 characters in length"
          },
          {
            "name" : "customer[fee_percentage]",
            "type" : "number",
            "in" : "formData",
            "description" : "Fee Percentage - must be between 0.0 and 1.0"
          },
          {
            "name" : "customer[can_post_w2]",
            "type" : "boolean",
            "in" : "formData",
            "description" : "True if this Customer can post w2 job requests. Default is False when not set"
          },
          {
            "name" : "customer[can_post_1099]",
            "type" : "boolean",
            "in" : "formData",
            "description" : "True if this Customer can post 1099 job request. Default is True when not set"
          },
          {
            "name" : "customer[can_use_premier_features]",
            "type" : "boolean",
            "in" : "formData",
            "description" : "True if this Customer can use premium features"
          },
          {
            "name" : "customer[use_start_and_complete_pin]",
            "type" : "boolean",
            "in" : "formData",
            "description" : "True if this Customer can use Start and Complete Pin. Default is False when left blank or not set"
          },
          {
            "name" : "customer[strategic_pilot]",
            "type" : "boolean",
            "in" : "formData",
            "description" : "True if this Customer is strategic pilot"
          },
          {
            "name" : "customer[use_pending_state]",
            "type" : "boolean",
            "in" : "formData",
            "description" : "True if this Customer can use Pending Workflow. Default is False when not set"
          }
        ],
        "responses" : {
          "422" : {
            "description" : "Could not save the Customer"
          }
        },
        "description" : ""
      }
    },
    "/multi_day_job_requests" : {
      "post" : {
        "tags" : [
          "multi_day_job_requests"
        ],
        "consumes" : [
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "operationId" : "post_multi_day_job_requests",
        "summary" : "Create a Multi-day Job Request",
        "parameters" : [
          {
            "name" : "multi_day_job_request[repeat_type]",
            "type" : "string",
            "enum" : [
              "daily",
              "weekly"
            ],
            "in" : "formData",
            "required" : true,
            "description" : "The repeat interval for this Job Request. Note that individual Job Requests can be removed from a Multi-Day Job Request after creation so this repeat may not match the actual days."
          },
          {
            "name" : "token",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "Token obtained from /authorize"
          },
          {
            "name" : "multi_day_job_request[same_workers]",
            "type" : "boolean",
            "in" : "formData",
            "description" : "True if the Requestor wants the same Wonoloers each day"
          },
          {
            "name" : "multi_day_job_request[repeat_number]",
            "type" : "number",
            "in" : "formData",
            "description" : "How many days (occurences) this Multi-Day Job Request comprised when initially created. See prior note."
          }
        ],
        "responses" : {
          "200" : {
            "description" : "ok"
          }
        },
        "description" : ""
      }
    },
    "/multi_day_job_requests/{id}" : {
      "patch" : {
        "tags" : [
          "multi_day_job_requests"
        ],
        "consumes" : [
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "operationId" : "patch_multi_day_job_requests_id",
        "summary" : "Update a Multi-day Job Request",
        "parameters" : [
          {
            "name" : "multi_day_job_request[repeat_type]",
            "type" : "string",
            "enum" : [
              "daily",
              "weekly"
            ],
            "in" : "formData",
            "required" : true,
            "description" : "The repeat interval for this Job Request. Note that individual Job Requests can be removed from a Multi-Day Job Request after creation so this repeat may not match the actual days."
          },
          {
            "name" : "token",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "Token obtained from /authorize"
          },
          {
            "name" : "id",
            "type" : "number",
            "in" : "path",
            "required" : true,
            "description" : "ID of the Multi-day Job Request"
          },
          {
            "name" : "multi_day_job_request[same_workers]",
            "type" : "boolean",
            "in" : "formData",
            "description" : "True if the Requestor wants the same Wonoloers each day"
          },
          {
            "name" : "multi_day_job_request[repeat_number]",
            "type" : "number",
            "in" : "formData",
            "description" : "How many days (occurences) this Multi-Day Job Request comprised when initially created. See prior note."
          }
        ],
        "responses" : {
          "200" : {
            "description" : "ok"
          }
        },
        "description" : ""
      },
      "get" : {
        "tags" : [
          "multi_day_job_requests"
        ],
        "consumes" : [
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "operationId" : "get_multi_day_job_requests_id",
        "summary" : "Get a specific Multi-day Job Request",
        "parameters" : [
          {
            "name" : "token",
            "type" : "string",
            "in" : "query",
            "required" : true,
            "description" : "Token obtained from /authorize"
          },
          {
            "name" : "id",
            "type" : "number",
            "in" : "path",
            "required" : true,
            "description" : "ID of the Multi-day Job Request"
          }
        ],
        "responses" : {
          "200" : {
            "description" : "ok"
          }
        },
        "description" : ""
      }
    },
    "/users" : {
      "get" : {
        "tags" : [
          "users"
        ],
        "consumes" : [
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "operationId" : "get_users",
        "summary" : "List users",
        "parameters" : [
          {
            "name" : "token",
            "type" : "string",
            "in" : "query",
            "required" : true,
            "description" : "Token obtained from /authorize"
          },
          {
            "name" : "page",
            "type" : "number",
            "in" : "query",
            "description" : "The page number to start from"
          },
          {
            "name" : "per",
            "type" : "number",
            "in" : "query",
            "description" : "The size of the page"
          },
          {
            "name" : "type",
            "type" : "string",
            "in" : "query",
            "description" : "Filter Users by type - either 'Worker' or 'Employer'"
          },
          {
            "name" : "email",
            "type" : "string",
            "in" : "query",
            "description" : "Filter Users by email"
          },
          {
            "name" : "first_name",
            "type" : "string",
            "in" : "query",
            "description" : "Filter Users by first name - should contain only letters, numbers, dash (-) and period (.) character"
          },
          {
            "name" : "last_name",
            "type" : "string",
            "in" : "query",
            "description" : "Filter Users by last name - should contain only letters, numbers, dash (-) and period (.) character"
          },
          {
            "name" : "external_id",
            "type" : "string",
            "in" : "query",
            "description" : "Filter Users by external id(s) - separate multiple external ids with commas"
          },
          {
            "name" : "onboarding_last_state",
            "type" : "string",
            "enum" : [
              "not_started",
              "take_quiz",
              "take_background_check",
              "schedule_call",
              "call",
              "pending_background_check",
              "complete",
              "rejected",
              "error",
              "invited",
              "uninvited"
            ],
            "in" : "query",
            "description" : "Filter Users by onboarding state(s) - separate multiple states with commas"
          },
          {
            "name" : "w2_onboarding_status",
            "type" : "string",
            "enum" : [
              "not_started",
              "started",
              "pending",
              "completed",
              "queued"
            ],
            "in" : "query",
            "description" : "Filter users by W2 onboarding states(s) - separate multiple states with commas"
          },
          {
            "name" : "w2_employee_id",
            "type" : "string",
            "in" : "query",
            "description" : "Filter Users by their W2 employee ID"
          },
          {
            "name" : "address_state",
            "type" : "string",
            "in" : "query",
            "description" : "Filter Users by address state - separate multiple states with commas"
          },
          {
            "name" : "drug_tested",
            "type" : "string",
            "enum" : [
              "passed",
              "failed"
            ],
            "in" : "query",
            "description" : "Filter Users by drug test results - separate multiple states with commas"
          },
          {
            "name" : "updated_before",
            "type" : "string",
            "in" : "query",
            "description" : "Filter Users by those that were last updated before provided DateTime"
          },
          {
            "name" : "updated_after",
            "type" : "string",
            "in" : "query",
            "description" : "Filter Users by those that were last updated after provided DateTime"
          }
        ],
        "responses" : {
          "401" : {
            "description" : "Unauthorized - you did not pass a valid token"
          }
        },
        "description" : "\n<p>Returns a list of Users, optionally paginated. Note: the maximum number\nreturned per page in any case is 50.</p>\n"
      },
      "post" : {
        "tags" : [
          "users"
        ],
        "consumes" : [
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "operationId" : "post_users",
        "summary" : "Create a user",
        "parameters" : [
          {
            "name" : "user[customer_id]",
            "type" : "number",
            "in" : "formData",
            "required" : true,
            "description" : "Employer's customer ID. This attribute is used for Employers only."
          },
          {
            "name" : "user[role]",
            "type" : "string",
            "enum" : [
              "customer_admin",
              "requestor",
              "read_only"
            ],
            "in" : "formData",
            "required" : true,
            "description" : "Employer's role. This attribute is used for Employers only."
          },
          {
            "name" : "user[user_badges_attributes][badge_id]",
            "type" : "number",
            "in" : "formData",
            "required" : true,
            "description" : "The ID of the Badge. This attribute is used for Workers only."
          },
          {
            "name" : "user[synced_worker_id]",
            "type" : "number",
            "in" : "formData",
            "required" : true,
            "description" : "Worker's ID on an external server, used for syncing purposes. This attribute is used for Workers only."
          },
          {
            "name" : "user[last_name]",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "User last name - should contain only letters, numbers, dash (-) and period (.) character"
          },
          {
            "name" : "user[first_name]",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "User first name - should contain only letters, numbers, dash (-) and period (.) character"
          },
          {
            "name" : "user[password_confirmation]",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "Must be specified and match password, if specified."
          },
          {
            "name" : "user[password]",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "Password. Minimum 8 characters. Must be specified on creation."
          },
          {
            "name" : "user[email]",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "User email - must be unique."
          },
          {
            "name" : "user[type]",
            "type" : "string",
            "enum" : [
              "Worker",
              "Employer"
            ],
            "in" : "formData",
            "required" : true,
            "description" : "The type of User - Worker = Wonoloer, Employer = Requestor"
          },
          {
            "name" : "token",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "Token obtained from /authorize"
          },
          {
            "name" : "user[gender]",
            "type" : "string",
            "in" : "formData",
            "description" : "User's gender"
          },
          {
            "name" : "user[avatar_url]",
            "type" : "string",
            "in" : "formData"
          },
          {
            "name" : "user[address]",
            "type" : "string",
            "in" : "formData"
          },
          {
            "name" : "user[city]",
            "type" : "string",
            "in" : "formData"
          },
          {
            "name" : "user[address_state]",
            "type" : "string",
            "in" : "formData"
          },
          {
            "name" : "user[zip]",
            "type" : "string",
            "in" : "formData"
          },
          {
            "name" : "user[phone]",
            "type" : "string",
            "in" : "formData"
          },
          {
            "name" : "user[suspended]",
            "type" : "boolean",
            "in" : "formData",
            "description" : "True if the User is currently suspended"
          },
          {
            "name" : "user[suspended_at]",
            "type" : "string",
            "in" : "formData"
          },
          {
            "name" : "user[rating]",
            "type" : "number",
            "in" : "formData",
            "description" : "User's current rating (out of 5.0)"
          },
          {
            "name" : "user[agreed_to_terms]",
            "type" : "boolean",
            "in" : "formData",
            "description" : "True if the User has agreed to terms"
          },
          {
            "name" : "user[agreed_to_terms_date]",
            "type" : "string",
            "in" : "formData"
          },
          {
            "name" : "user[external_id]",
            "type" : "string",
            "in" : "formData",
            "description" : "An arbitrary value to be associated with this Worker. This attribute is used for Workers only."
          },
          {
            "name" : "user[onboarding_last_state]",
            "type" : "string",
            "enum" : [
              "not_started",
              "take_quiz",
              "take_background_check",
              "schedule_call",
              "call",
              "pending_background_check",
              "complete",
              "rejected",
              "error",
              "invited",
              "uninvited"
            ],
            "in" : "formData",
            "description" : "Worker's last onboarding state. This attribute is used for Workers only."
          },
          {
            "name" : "user[w2_employee_id]",
            "type" : "string",
            "in" : "formData",
            "description" : "Worker's unique employee ID for W2 classified jobs. This attribute is used for Workers only."
          },
          {
            "name" : "user[drug_tested]",
            "type" : "string",
            "enum" : [
              "passed",
              "failed"
            ],
            "in" : "formData",
            "description" : "Worker's drug test results. This attribute is used for Workers only."
          },
          {
            "name" : "user[verified_phone]",
            "type" : "string",
            "in" : "formData",
            "description" : "Worker's verified phone. This attribute is used for Workers only."
          },
          {
            "name" : "user[phone_verified_at]",
            "type" : "string",
            "in" : "formData",
            "description" : "This attribute is used for Workers only."
          },
          {
            "name" : "user[user_badges_attributes][id]",
            "type" : "number",
            "in" : "formData",
            "description" : "The ID of the current User-Badge association between this Worker and a badge - required for the '_destroy' function below. This attribute is used for Workers only."
          },
          {
            "name" : "user[user_badges_attributes][_destroy]",
            "type" : "string",
            "enum" : [
              true
            ],
            "in" : "formData",
            "description" : "Set to remove this User-Badge association on updating a Worker (PATCH). This attribute is used for Workers only."
          },
          {
            "name" : "user[title]",
            "type" : "string",
            "in" : "formData",
            "description" : "Employer's title. This attribute is used for Employers only."
          }
        ],
        "responses" : {
          "403" : {
            "description" : "Forbidden - if you have Public Pool access only"
          }
        },
        "description" : ""
      }
    },
    "/users/invite" : {
      "post" : {
        "tags" : [
          "users"
        ],
        "consumes" : [
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "operationId" : "post_users_invite",
        "summary" : "Invite worker into our system",
        "parameters" : [
          {
            "name" : "user[type]",
            "type" : "string",
            "enum" : [
              "Worker"
            ],
            "in" : "formData",
            "required" : true,
            "description" : "The type of User - Worker = Wonoloer"
          },
          {
            "name" : "user[phone]",
            "type" : "string",
            "in" : "formData",
            "required" : true
          },
          {
            "name" : "user[last_name]",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "Worker last name - should contain only letters, numbers, dash (-) and period (.) character"
          },
          {
            "name" : "user[first_name]",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "Worker first name - should contain only letters, numbers, dash (-) and period (.) character"
          },
          {
            "name" : "token",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "Token obtained from /authorize"
          },
          {
            "name" : "user[email]",
            "type" : "string",
            "in" : "formData",
            "description" : "Worker email"
          },
          {
            "name" : "user[external_id]",
            "type" : "number",
            "in" : "formData",
            "description" : "the id of user on the external server"
          }
        ],
        "responses" : {
          "200" : {
            "description" : "ok"
          }
        },
        "description" : ""
      }
    },
    "/users/{id}" : {
      "patch" : {
        "tags" : [
          "users"
        ],
        "consumes" : [
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "operationId" : "put/patch_users_id",
        "summary" : "Update a user",
        "parameters" : [
          {
            "name" : "user[customer_id]",
            "type" : "number",
            "in" : "formData",
            "required" : true,
            "description" : "Employer's customer ID. This attribute is used for Employers only."
          },
          {
            "name" : "user[role]",
            "type" : "string",
            "enum" : [
              "customer_admin",
              "requestor",
              "read_only"
            ],
            "in" : "formData",
            "required" : true,
            "description" : "Employer's role. This attribute is used for Employers only."
          },
          {
            "name" : "user[user_badges_attributes][badge_id]",
            "type" : "number",
            "in" : "formData",
            "required" : true,
            "description" : "The ID of the Badge. This attribute is used for Workers only."
          },
          {
            "name" : "user[synced_worker_id]",
            "type" : "number",
            "in" : "formData",
            "required" : true,
            "description" : "Worker's ID on an external server, used for syncing purposes. This attribute is used for Workers only."
          },
          {
            "name" : "user[last_name]",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "User last name - should contain only letters, numbers, dash (-) and period (.) character"
          },
          {
            "name" : "user[first_name]",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "User first name - should contain only letters, numbers, dash (-) and period (.) character"
          },
          {
            "name" : "user[password_confirmation]",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "Must be specified and match password, if specified."
          },
          {
            "name" : "user[password]",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "Password. Minimum 8 characters. Must be specified on creation."
          },
          {
            "name" : "user[email]",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "User email - must be unique."
          },
          {
            "name" : "user[type]",
            "type" : "string",
            "enum" : [
              "Worker",
              "Employer"
            ],
            "in" : "formData",
            "required" : true,
            "description" : "The type of User - Worker = Wonoloer, Employer = Requestor"
          },
          {
            "name" : "user[id]",
            "type" : "number",
            "in" : "formData",
            "required" : true,
            "description" : "Unique ID of the User"
          },
          {
            "name" : "token",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "Token obtained from /authorize"
          },
          {
            "name" : "id",
            "type" : "number",
            "in" : "path",
            "required" : true
          },
          {
            "name" : "user[gender]",
            "type" : "string",
            "in" : "formData",
            "description" : "User's gender"
          },
          {
            "name" : "user[avatar_url]",
            "type" : "string",
            "in" : "formData"
          },
          {
            "name" : "user[address]",
            "type" : "string",
            "in" : "formData"
          },
          {
            "name" : "user[city]",
            "type" : "string",
            "in" : "formData"
          },
          {
            "name" : "user[address_state]",
            "type" : "string",
            "in" : "formData"
          },
          {
            "name" : "user[zip]",
            "type" : "string",
            "in" : "formData"
          },
          {
            "name" : "user[phone]",
            "type" : "string",
            "in" : "formData"
          },
          {
            "name" : "user[suspended]",
            "type" : "boolean",
            "in" : "formData",
            "description" : "True if the User is currently suspended"
          },
          {
            "name" : "user[suspended_at]",
            "type" : "string",
            "in" : "formData"
          },
          {
            "name" : "user[rating]",
            "type" : "number",
            "in" : "formData",
            "description" : "User's current rating (out of 5.0)"
          },
          {
            "name" : "user[agreed_to_terms]",
            "type" : "boolean",
            "in" : "formData",
            "description" : "True if the User has agreed to terms"
          },
          {
            "name" : "user[agreed_to_terms_date]",
            "type" : "string",
            "in" : "formData"
          },
          {
            "name" : "user[external_id]",
            "type" : "string",
            "in" : "formData",
            "description" : "An arbitrary value to be associated with this Worker. This attribute is used for Workers only."
          },
          {
            "name" : "user[onboarding_last_state]",
            "type" : "string",
            "enum" : [
              "not_started",
              "take_quiz",
              "take_background_check",
              "schedule_call",
              "call",
              "pending_background_check",
              "complete",
              "rejected",
              "error",
              "invited",
              "uninvited"
            ],
            "in" : "formData",
            "description" : "Worker's last onboarding state. This attribute is used for Workers only."
          },
          {
            "name" : "user[w2_employee_id]",
            "type" : "string",
            "in" : "formData",
            "description" : "Worker's unique employee ID for W2 classified jobs. This attribute is used for Workers only."
          },
          {
            "name" : "user[drug_tested]",
            "type" : "string",
            "enum" : [
              "passed",
              "failed"
            ],
            "in" : "formData",
            "description" : "Worker's drug test results. This attribute is used for Workers only."
          },
          {
            "name" : "user[verified_phone]",
            "type" : "string",
            "in" : "formData",
            "description" : "Worker's verified phone. This attribute is used for Workers only."
          },
          {
            "name" : "user[phone_verified_at]",
            "type" : "string",
            "in" : "formData",
            "description" : "This attribute is used for Workers only."
          },
          {
            "name" : "user[user_badges_attributes][id]",
            "type" : "number",
            "in" : "formData",
            "description" : "The ID of the current User-Badge association between this Worker and a badge - required for the '_destroy' function below. This attribute is used for Workers only."
          },
          {
            "name" : "user[user_badges_attributes][_destroy]",
            "type" : "string",
            "enum" : [
              true
            ],
            "in" : "formData",
            "description" : "Set to remove this User-Badge association on updating a Worker (PATCH). This attribute is used for Workers only."
          },
          {
            "name" : "user[title]",
            "type" : "string",
            "in" : "formData",
            "description" : "Employer's title. This attribute is used for Employers only."
          }
        ],
        "responses" : {
          "403" : {
            "description" : "Forbidden - if you have Public Pool access only"
          }
        },
        "description" : ""
      },
      "get" : {
        "tags" : [
          "users"
        ],
        "consumes" : [
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "operationId" : "get_users_id",
        "summary" : "Get a specific user",
        "parameters" : [
          {
            "name" : "token",
            "type" : "string",
            "in" : "query",
            "required" : true,
            "description" : "Token obtained from /authorize"
          },
          {
            "name" : "id",
            "type" : "number",
            "in" : "path",
            "required" : true
          }
        ],
        "responses" : {
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not found. No User with the specified ID can be found"
          }
        },
        "description" : ""
      }
    },
    "/users/{id}/tracking" : {
      "get" : {
        "tags" : [
          "users"
        ],
        "consumes" : [
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "operationId" : "get_users_id_tracking",
        "summary" : "Get tracking data for a specific user",
        "parameters" : [
          {
            "name" : "token",
            "type" : "string",
            "in" : "query",
            "required" : true,
            "description" : "Token obtained from /authorize"
          },
          {
            "name" : "id",
            "type" : "number",
            "in" : "path",
            "required" : true
          }
        ],
        "responses" : {
          "403" : {
            "description" : "Forbidden - if you have Public Pool access only"
          }
        },
        "description" : ""
      }
    },
    "/sync_auth_token" : {
      "post" : {
        "tags" : [
          "users"
        ],
        "consumes" : [
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "operationId" : "post_sync_auth_token",
        "summary" : "sync auth_token for external user",
        "parameters" : [
          {
            "name" : "created_at",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "the created time of user session token"
          },
          {
            "name" : "auth_token",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "the auth token of user who need to be synced"
          },
          {
            "name" : "synced_worker_id",
            "type" : "number",
            "in" : "formData",
            "required" : true,
            "description" : "the id of user on the external server"
          },
          {
            "name" : "token",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "Token obtained from /authorize"
          }
        ],
        "responses" : {
          "200" : {
            "description" : "ok"
          }
        },
        "description" : "\n<p>Sync auth token from Wonolo server to external server</p>\n"
      }
    },
    "/authenticate" : {
      "post" : {
        "tags" : [
          "sessions"
        ],
        "consumes" : [
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "operationId" : "post_authenticate",
        "summary" : "Authenticate and obtain a token",
        "parameters" : [
          {
            "name" : "secret_key",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "Your secret API key, e.g. +sk_test_rgyzxu6y_86FXE5YSMjN+"
          },
          {
            "name" : "api_key",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "Your publishable API key, e.g. +pk_test_k4ttwB9bYVdmVyXgA7fD+"
          }
        ],
        "responses" : {
          "422" : {
            "description" : "You have not specified both api_key and secret_key"
          },
          "401" : {
            "description" : "Your api_key or secret_key is invalid"
          }
        },
        "description" : "\n<p>Pass in your API publishable key and secret keys and obtain a token to use\nfor subsequent API calls. Tokens expire after 24 hours.</p>\n"
      }
    },
    "/search" : {
      "get" : {
        "tags" : [
          "search"
        ],
        "consumes" : [
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "operationId" : "get_search",
        "summary" : "Search Wonolo",
        "parameters" : [
          {
            "name" : "q",
            "type" : "string",
            "in" : "query",
            "required" : true,
            "description" : "The search parameter"
          },
          {
            "name" : "token",
            "type" : "string",
            "in" : "query",
            "required" : true,
            "description" : "Token obtained from /authorize"
          }
        ],
        "responses" : {
          "200" : {
            "description" : "ok"
          }
        },
        "description" : "\n<p>Searches common attributes of the most common Wonolo models</p>\n"
      }
    },
    "/info" : {
      "get" : {
        "tags" : [
          "info"
        ],
        "consumes" : [
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "operationId" : "get_info",
        "summary" : "Get API information",
        "parameters" : [],
        "responses" : {
          "200" : {
            "description" : "ok"
          }
        },
        "description" : "\n<p>Returns information on the environment, API version, etc. No authentication\nis required.</p>\n"
      }
    },
    "/badges" : {
      "get" : {
        "tags" : [
          "badges"
        ],
        "consumes" : [
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "operationId" : "get_badges",
        "summary" : "List available Badges",
        "parameters" : [
          {
            "name" : "token",
            "type" : "string",
            "in" : "query",
            "required" : true,
            "description" : "Token obtained from /authorize"
          },
          {
            "name" : "page",
            "type" : "number",
            "in" : "query",
            "description" : "The page number to start from"
          },
          {
            "name" : "per",
            "type" : "number",
            "in" : "query",
            "description" : "The size of the page"
          },
          {
            "name" : "query",
            "type" : "string",
            "in" : "query",
            "description" : "Filter by name of badge"
          }
        ],
        "responses" : {
          "401" : {
            "description" : "Unauthorized"
          }
        },
        "description" : "\n<p>Returns a list of available Badges, optionally paginated. Note: the maximum\nnumber returned per page in any case is 50.</p>\n"
      },
      "post" : {
        "tags" : [
          "badges"
        ],
        "consumes" : [
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "operationId" : "post_badges",
        "summary" : "Create a new Badge",
        "parameters" : [
          {
            "name" : "badge[description]",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "Description of Badge Detail"
          },
          {
            "name" : "badge[name]",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "Name of Badge"
          },
          {
            "name" : "token",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "Token obtained from /authorize"
          },
          {
            "name" : "badge[info_url]",
            "type" : "string",
            "in" : "formData",
            "description" : "External Url for more Information about Badge"
          },
          {
            "name" : "badge[remote_icon_url]",
            "type" : "string",
            "in" : "formData",
            "description" : "Remote URL of Icon Image"
          },
          {
            "name" : "badge[is_soft]",
            "type" : "boolean",
            "in" : "formData",
            "description" : "Allow Wonoloers to be ranked/notified about a job even though they do not have the badge"
          }
        ],
        "responses" : {
          "200" : {
            "description" : "ok"
          }
        },
        "description" : ""
      }
    },
    "/badges/{id}" : {
      "get" : {
        "tags" : [
          "badges"
        ],
        "consumes" : [
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "operationId" : "get_badges_id",
        "summary" : "Get a specific Badge",
        "parameters" : [
          {
            "name" : "token",
            "type" : "string",
            "in" : "query",
            "required" : true,
            "description" : "Token obtained from /authorize"
          },
          {
            "name" : "id",
            "type" : "number",
            "in" : "path",
            "required" : true
          }
        ],
        "responses" : {
          "200" : {
            "description" : "ok"
          }
        },
        "description" : ""
      },
      "patch" : {
        "tags" : [
          "badges"
        ],
        "consumes" : [
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "operationId" : "patch_badges_id",
        "summary" : "Update a Badge",
        "parameters" : [
          {
            "name" : "badge[description]",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "Description of Badge Detail"
          },
          {
            "name" : "badge[name]",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "Name of Badge"
          },
          {
            "name" : "token",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "Token obtained from /authorize"
          },
          {
            "name" : "id",
            "type" : "number",
            "in" : "path",
            "required" : true
          },
          {
            "name" : "badge[info_url]",
            "type" : "string",
            "in" : "formData",
            "description" : "External Url for more Information about Badge"
          },
          {
            "name" : "badge[remote_icon_url]",
            "type" : "string",
            "in" : "formData",
            "description" : "Remote URL of Icon Image"
          },
          {
            "name" : "badge[is_soft]",
            "type" : "boolean",
            "in" : "formData",
            "description" : "Allow Wonoloers to be ranked/notified about a job even though they do not have the badge"
          }
        ],
        "responses" : {
          "200" : {
            "description" : "ok"
          }
        },
        "description" : ""
      },
      "delete" : {
        "tags" : [
          "badges"
        ],
        "consumes" : [
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "operationId" : "delete_badges_id",
        "summary" : "Delete a Badge",
        "parameters" : [
          {
            "name" : "token",
            "type" : "string",
            "in" : "formData",
            "required" : true,
            "description" : "Token obtained from /authorize"
          },
          {
            "name" : "id",
            "type" : "number",
            "in" : "path",
            "required" : true
          }
        ],
        "responses" : {
          "200" : {
            "description" : "ok"
          }
        },
        "description" : ""
      }
    }
  },
  "definitions" : {},
  "tags" : [
    {
      "name" : "messages",
      "description" : "\n<p>Wonolo&#39;s In-app Messages allow a Requestor and a Wonoloer to\ncommunicate about a Job.</p>\n<hr>\n"
    },
    {
      "name" : "jobs",
      "description" : "\n<p>A Job represents an individual Wonoloer (Worker) performing a Job Request.</p>\n\n<h4 id=\"label-States\">States<span><a href=\"#label-States\">&para;</a> <a href=\"#top\">&uarr;</a></span></h4>\n\n<p>Jobs progress through a series of states:</p>\n<ul><li>\n<p><code>pending</code> the state after the Wonoloer applies a job (this state\nwill only be available for jobs where either the Customer setting and the\nJob Request has the pending state enabled).  A Wonoloer in the \u201cpending\u201d\nstate will have to wait until another api call changes to filled or the\ncut-off time is met.</p>\n</li><li>\n<p><code>rejected</code> the state after the Pending job is rejected by either\nan api call or the cut-off time.</p>\n</li><li>\n<p><code>filled</code> the state after the Wonoloer accepts a Job (i.e.\npresses \u201cAccept\u201d in the Wonolo app) or the pending job application is\ngranted (from an api call which will set the state)</p>\n</li><li>\n<p><code>in_progress</code> the state after a Wonoloer starts a job near the\nposted start time (i.e. pressed \u201cStart\u201d in the Wonolo app or a Requester\n\u201cstarts\u201d the job for them manually in the Customer Portal)</p>\n</li><li>\n<p><code>completed</code> the state after the Wonoloer has completed the Job\n(i.e. pressed \u201cComplete\u201d in the Wonolo app or the auto-complete setting is\nenabled)</p>\n</li><li>\n<p><code>approved</code> the state after the Requestor has approved OR rated\nthe Job (i.e. the Requestor approves/rates from Customer Portal)</p>\n</li><li>\n<p><code>cancelled</code> the state after the Job or Job Request has been\ncanceled (i.e. the Requestor cancels the job/job request in the Customer\nPortal)</p>\n</li><li>\n<p><code>withdrawn</code> the state occurs when a Wonoloer withdraws from a\njob in the Wonolo app</p>\n</li><li>\n<p><code>no_show</code> the state occurs when a Requester marks a Wonoloer as\n\u201cno-show\u201d in the Customer Portal.</p>\n</li><li>\n<p><code>paused</code> the state occurs when a Wonoloer presses pause on the\nWonolo app (this state will only be available for jobs with a W2\nclassification turned on)</p>\n</li></ul>\n\n<h4 id=\"label-Transitions\">Transitions<span><a href=\"#label-Transitions\">&para;</a> <a href=\"#top\">&uarr;</a></span></h4>\n\n<p>Jobs record an array of <code>transitions</code> which record when the Job\n<code>state</code> changed and meta-data such as the location of the\nWonoloer when the transition took place.</p>\n<hr>\n"
    },
    {
      "name" : "job_requests",
      "description" : "\n<p>A Job Request represents a Requestor&#39;s desire for Wonoloers to perform\na Job. e.g. \u201cI need 12 people at noon tomorrow to stack boxes.\u201d</p>\n\n<h4 id=\"label-States\">States<span><a href=\"#label-States\">&para;</a> <a href=\"#top\">&uarr;</a></span></h4>\n\n<p>Job Requests progress through a series of states. Generally speaking, the\nstate of a Job Request is determined by the states of the Jobs attached to\nit. The possible Job Request states are:</p>\n<ul><li>\n<p><code>draft</code> the Job Request has not yet been posted and may be\nincomplete.</p>\n</li><li>\n<p><code>unassigned</code> the Job Request has not yet been posted so is not\nvisible to Wonoloers. However, any Preferred Wonoloers are notified during\nthis time, if specified.</p>\n</li><li>\n<p><code>posted</code> the Job Request is acceptable by any qualified\nWonoloer. During this time, qualified Wonoloers will be ranked and\nnotified.</p>\n</li><li>\n<p><code>filled</code> all of the Job Request&#39;s slots are filled.</p>\n</li><li>\n<p><code>in_progress</code> the Job Request start time has passed and at least\none Wonoloer has started working.</p>\n</li><li>\n<p><code>completed</code> all Wonoloers have completed work for this Job\nRequest (i.e. all Jobs attached to this Job Request have a state of\n<code>completed</code>).</p>\n</li><li>\n<p><code>approved</code> all Jobs attached to this Job Request are approved.</p>\n</li><li>\n<p><code>cancelled</code> the Job Request is cancelled. All Jobs attached to\nthis Job Request will also be cancelled.</p>\n</li><li>\n<p><code>unfilled</code> the Job Request start time has passed but none of the\nslots was filled.</p>\n</li></ul>\n<hr>\n"
    },
    {
      "name" : "customers",
      "description" : ""
    },
    {
      "name" : "multi_day_job_requests",
      "description" : "\n<p>A Multi-day Job Request is a simple umbrella that joins together multiple\nJob Requests. The simplest analogy is a repeating calendar entry. The\nMulti-day Job Request holds the repeat rules and links to each instance but\nthe details are in each individual Job Request. Additionally, a Requestor\nmay specify that a Wonoloer must accept all days of a Multi-day Job\nRequest. Otherwise, a Wonoloer is free to pick and choose those days they\nwish.</p>\n<hr>\n"
    },
    {
      "name" : "users",
      "description" : "\n<p>A User can be either a Requestor (type: <code>Employer</code>) or a\nWonoloer (type: <code>Worker</code>).</p>\n\n<h3 id=\"label-Priviledge+Level\">Priviledge Level<span><a href=\"#label-Priviledge+Level\">&para;</a> <a href=\"#top\">&uarr;</a></span></h3>\n\n<p>If you have <strong>Public Pool</strong> access, you will only be able to\naccess Wonoloers with whom you have \u201cactive\u201d Jobs.  Active jobs are those\nJobs which:</p>\n<ul><li>\n<p>are in a state of <code>filled</code>, <code>in_progress</code>,\n<code>paused</code>, <code>completed</code>, or</p>\n</li><li>\n<p>are in a state of <code>approved</code> and were approved in the past 24\nhours.</p>\n</li></ul>\n"
    },
    {
      "name" : "sessions",
      "description" : ""
    },
    {
      "name" : "search",
      "description" : ""
    },
    {
      "name" : "info",
      "description" : ""
    },
    {
      "name" : "badges",
      "description" : "\n<p>A Badge represents a qualification or skill that a Worker can acquire and\nwhich can be specified as required for a particular Job Request.</p>\n\n<p>If a Job Request specifies that Badges are required, only those Workers who\nposess all the specified Badges will see the Job Request and be able to\nAccept it.</p>\n<hr>\n"
    }
  ],
  "host" : "test.wonolo.com"
}